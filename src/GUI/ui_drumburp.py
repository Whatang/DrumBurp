# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\mike_000\workspace\DrumBurp\src\GUI\drumburp.ui'
#
# Created: Thu Jan  3 12:23:19 2019
#      by: PyQt4 UI code generator 4.11
#
# WARNING! All changes made in this file will be lost!

from PyQt4 import QtCore, QtGui

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)

class Ui_DrumBurpWindow(object):
    def setupUi(self, DrumBurpWindow):
        DrumBurpWindow.setObjectName(_fromUtf8("DrumBurpWindow"))
        DrumBurpWindow.resize(1268, 769)
        DrumBurpWindow.setFocusPolicy(QtCore.Qt.NoFocus)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/drumburp.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        DrumBurpWindow.setWindowIcon(icon)
        DrumBurpWindow.setAnimated(True)
        DrumBurpWindow.setDockNestingEnabled(True)
        DrumBurpWindow.setDockOptions(QtGui.QMainWindow.AllowNestedDocks|QtGui.QMainWindow.AnimatedDocks)
        self.centralwidget = QtGui.QWidget(DrumBurpWindow)
        self.centralwidget.setObjectName(_fromUtf8("centralwidget"))
        self.verticalLayout = QtGui.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setMargin(3)
        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
        self.tabWidget = QtGui.QTabWidget(self.centralwidget)
        self.tabWidget.setTabShape(QtGui.QTabWidget.Triangular)
        self.tabWidget.setIconSize(QtCore.QSize(18, 18))
        self.tabWidget.setObjectName(_fromUtf8("tabWidget"))
        self.textTab = QtGui.QWidget()
        self.textTab.setObjectName(_fromUtf8("textTab"))
        self.verticalLayout_3 = QtGui.QVBoxLayout(self.textTab)
        self.verticalLayout_3.setObjectName(_fromUtf8("verticalLayout_3"))
        self.frame_3 = QtGui.QFrame(self.textTab)
        self.frame_3.setFrameShape(QtGui.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtGui.QFrame.Raised)
        self.frame_3.setObjectName(_fromUtf8("frame_3"))
        self.horizontalLayout_6 = QtGui.QHBoxLayout(self.frame_3)
        self.horizontalLayout_6.setSpacing(4)
        self.horizontalLayout_6.setMargin(0)
        self.horizontalLayout_6.setObjectName(_fromUtf8("horizontalLayout_6"))
        self.scoreActionsBox = QtGui.QGroupBox(self.frame_3)
        self.scoreActionsBox.setObjectName(_fromUtf8("scoreActionsBox"))
        self.horizontalLayout_7 = QtGui.QHBoxLayout(self.scoreActionsBox)
        self.horizontalLayout_7.setMargin(5)
        self.horizontalLayout_7.setObjectName(_fromUtf8("horizontalLayout_7"))
        self.FitWindowButton = QtGui.QPushButton(self.scoreActionsBox)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.FitWindowButton.sizePolicy().hasHeightForWidth())
        self.FitWindowButton.setSizePolicy(sizePolicy)
        self.FitWindowButton.setText(_fromUtf8(""))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/video-display.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.FitWindowButton.setIcon(icon1)
        self.FitWindowButton.setObjectName(_fromUtf8("FitWindowButton"))
        self.horizontalLayout_7.addWidget(self.FitWindowButton)
        self.FitPageButton = QtGui.QPushButton(self.scoreActionsBox)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.FitPageButton.sizePolicy().hasHeightForWidth())
        self.FitPageButton.setSizePolicy(sizePolicy)
        self.FitPageButton.setText(_fromUtf8(""))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/fit-page")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.FitPageButton.setIcon(icon2)
        self.FitPageButton.setObjectName(_fromUtf8("FitPageButton"))
        self.horizontalLayout_7.addWidget(self.FitPageButton)
        self.PrintScoreButton = QtGui.QPushButton(self.scoreActionsBox)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.PrintScoreButton.sizePolicy().hasHeightForWidth())
        self.PrintScoreButton.setSizePolicy(sizePolicy)
        self.PrintScoreButton.setText(_fromUtf8(""))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/document-print.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.PrintScoreButton.setIcon(icon3)
        self.PrintScoreButton.setObjectName(_fromUtf8("PrintScoreButton"))
        self.horizontalLayout_7.addWidget(self.PrintScoreButton)
        self.PrintPdfButton = QtGui.QPushButton(self.scoreActionsBox)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.PrintPdfButton.sizePolicy().hasHeightForWidth())
        self.PrintPdfButton.setSizePolicy(sizePolicy)
        self.PrintPdfButton.setText(_fromUtf8(""))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/pdf.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.PrintPdfButton.setIcon(icon4)
        self.PrintPdfButton.setObjectName(_fromUtf8("PrintPdfButton"))
        self.horizontalLayout_7.addWidget(self.PrintPdfButton)
        self.sectionNavigator = QtGui.QComboBox(self.scoreActionsBox)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.MinimumExpanding, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sectionNavigator.sizePolicy().hasHeightForWidth())
        self.sectionNavigator.setSizePolicy(sizePolicy)
        self.sectionNavigator.setSizeAdjustPolicy(QtGui.QComboBox.AdjustToContents)
        self.sectionNavigator.setMinimumContentsLength(6)
        self.sectionNavigator.setDuplicatesEnabled(True)
        self.sectionNavigator.setObjectName(_fromUtf8("sectionNavigator"))
        self.horizontalLayout_7.addWidget(self.sectionNavigator)
        self.horizontalLayout_6.addWidget(self.scoreActionsBox)
        self.scorePropertiesGroup = QtGui.QGroupBox(self.frame_3)
        self.scorePropertiesGroup.setFlat(False)
        self.scorePropertiesGroup.setCheckable(False)
        self.scorePropertiesGroup.setObjectName(_fromUtf8("scorePropertiesGroup"))
        self.horizontalLayout_8 = QtGui.QHBoxLayout(self.scorePropertiesGroup)
        self.horizontalLayout_8.setSpacing(8)
        self.horizontalLayout_8.setMargin(5)
        self.horizontalLayout_8.setObjectName(_fromUtf8("horizontalLayout_8"))
        self.paperBox = QtGui.QComboBox(self.scorePropertiesGroup)
        self.paperBox.setObjectName(_fromUtf8("paperBox"))
        self.paperBox.addItem(_fromUtf8(""))
        self.paperBox.addItem(_fromUtf8(""))
        self.horizontalLayout_8.addWidget(self.paperBox)
        self.widthSpinBox = QtGui.QSpinBox(self.scorePropertiesGroup)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widthSpinBox.sizePolicy().hasHeightForWidth())
        self.widthSpinBox.setSizePolicy(sizePolicy)
        self.widthSpinBox.setFrame(True)
        self.widthSpinBox.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.widthSpinBox.setButtonSymbols(QtGui.QAbstractSpinBox.UpDownArrows)
        self.widthSpinBox.setMinimum(10)
        self.widthSpinBox.setMaximum(1000)
        self.widthSpinBox.setProperty("value", 80)
        self.widthSpinBox.setObjectName(_fromUtf8("widthSpinBox"))
        self.horizontalLayout_8.addWidget(self.widthSpinBox)
        self.lineSpaceSlider = QtGui.QSlider(self.scorePropertiesGroup)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineSpaceSlider.sizePolicy().hasHeightForWidth())
        self.lineSpaceSlider.setSizePolicy(sizePolicy)
        self.lineSpaceSlider.setMaximum(100)
        self.lineSpaceSlider.setTracking(False)
        self.lineSpaceSlider.setOrientation(QtCore.Qt.Horizontal)
        self.lineSpaceSlider.setInvertedAppearance(False)
        self.lineSpaceSlider.setInvertedControls(False)
        self.lineSpaceSlider.setTickPosition(QtGui.QSlider.TicksBelow)
        self.lineSpaceSlider.setObjectName(_fromUtf8("lineSpaceSlider"))
        self.horizontalLayout_8.addWidget(self.lineSpaceSlider)
        self.defaultMeasureButton = QtGui.QPushButton(self.scorePropertiesGroup)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.MinimumExpanding, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.defaultMeasureButton.sizePolicy().hasHeightForWidth())
        self.defaultMeasureButton.setSizePolicy(sizePolicy)
        self.defaultMeasureButton.setObjectName(_fromUtf8("defaultMeasureButton"))
        self.horizontalLayout_8.addWidget(self.defaultMeasureButton)
        self.fontsButton = QtGui.QPushButton(self.scorePropertiesGroup)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Maximum, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fontsButton.sizePolicy().hasHeightForWidth())
        self.fontsButton.setSizePolicy(sizePolicy)
        self.fontsButton.setText(_fromUtf8(""))
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/preferences-desktop-font.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.fontsButton.setIcon(icon5)
        self.fontsButton.setObjectName(_fromUtf8("fontsButton"))
        self.horizontalLayout_8.addWidget(self.fontsButton)
        self.horizontalLayout_6.addWidget(self.scorePropertiesGroup)
        self.verticalLayout_3.addWidget(self.frame_3)
        self.scoreView = ScoreView(self.textTab)
        self.scoreView.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.scoreView.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.scoreView.setAcceptDrops(False)
        self.scoreView.setLineWidth(1)
        self.scoreView.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.scoreView.setRenderHints(QtGui.QPainter.HighQualityAntialiasing|QtGui.QPainter.TextAntialiasing)
        self.scoreView.setDragMode(QtGui.QGraphicsView.NoDrag)
        self.scoreView.setTransformationAnchor(QtGui.QGraphicsView.NoAnchor)
        self.scoreView.setRubberBandSelectionMode(QtCore.Qt.IntersectsItemBoundingRect)
        self.scoreView.setObjectName(_fromUtf8("scoreView"))
        self.verticalLayout_3.addWidget(self.scoreView)
        self.tabWidget.addTab(self.textTab, icon, _fromUtf8(""))
        self.lilypondTab = QtGui.QWidget()
        self.lilypondTab.setObjectName(_fromUtf8("lilypondTab"))
        self.verticalLayout_4 = QtGui.QVBoxLayout(self.lilypondTab)
        self.verticalLayout_4.setObjectName(_fromUtf8("verticalLayout_4"))
        self.lilypondGroupBox = QtGui.QGroupBox(self.lilypondTab)
        self.lilypondGroupBox.setObjectName(_fromUtf8("lilypondGroupBox"))
        self.gridLayout = QtGui.QGridLayout(self.lilypondGroupBox)
        self.gridLayout.setObjectName(_fromUtf8("gridLayout"))
        self.lilyPngButton = QtGui.QRadioButton(self.lilypondGroupBox)
        self.lilyPngButton.setObjectName(_fromUtf8("lilyPngButton"))
        self.gridLayout.addWidget(self.lilyPngButton, 0, 5, 1, 1)
        self.lilyPsButton = QtGui.QRadioButton(self.lilypondGroupBox)
        self.lilyPsButton.setObjectName(_fromUtf8("lilyPsButton"))
        self.gridLayout.addWidget(self.lilyPsButton, 0, 4, 1, 1)
        self.lilyFillButton = QtGui.QCheckBox(self.lilypondGroupBox)
        self.lilyFillButton.setObjectName(_fromUtf8("lilyFillButton"))
        self.gridLayout.addWidget(self.lilyFillButton, 0, 2, 1, 1)
        self.exportLilypondButton = QtGui.QPushButton(self.lilypondGroupBox)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/lilypond-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.exportLilypondButton.setIcon(icon6)
        self.exportLilypondButton.setObjectName(_fromUtf8("exportLilypondButton"))
        self.gridLayout.addWidget(self.exportLilypondButton, 0, 8, 1, 1)
        self.lilyPagesBox = QtGui.QSpinBox(self.lilypondGroupBox)
        self.lilyPagesBox.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.lilyPagesBox.setMaximum(1000)
        self.lilyPagesBox.setObjectName(_fromUtf8("lilyPagesBox"))
        self.gridLayout.addWidget(self.lilyPagesBox, 0, 0, 1, 1)
        self.lilypondPathButton = QtGui.QPushButton(self.lilypondGroupBox)
        self.lilypondPathButton.setIcon(icon6)
        self.lilypondPathButton.setObjectName(_fromUtf8("lilypondPathButton"))
        self.gridLayout.addWidget(self.lilypondPathButton, 0, 7, 1, 1)
        self.lilypondSize = QtGui.QSpinBox(self.lilypondGroupBox)
        self.lilypondSize.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.lilypondSize.setMinimum(8)
        self.lilypondSize.setMaximum(32)
        self.lilypondSize.setProperty("value", 20)
        self.lilypondSize.setObjectName(_fromUtf8("lilypondSize"))
        self.gridLayout.addWidget(self.lilypondSize, 0, 1, 1, 1)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 0, 6, 1, 1)
        self.lilyPdfButton = QtGui.QRadioButton(self.lilypondGroupBox)
        self.lilyPdfButton.setChecked(True)
        self.lilyPdfButton.setObjectName(_fromUtf8("lilyPdfButton"))
        self.gridLayout.addWidget(self.lilyPdfButton, 0, 3, 1, 1)
        self.verticalLayout_4.addWidget(self.lilypondGroupBox)
        self.lilyPreview = QtGui.QGraphicsView(self.lilypondTab)
        self.lilyPreview.setObjectName(_fromUtf8("lilyPreview"))
        self.verticalLayout_4.addWidget(self.lilyPreview)
        self.lilyPreviewControls = QtGui.QFrame(self.lilypondTab)
        self.lilyPreviewControls.setFrameShape(QtGui.QFrame.NoFrame)
        self.lilyPreviewControls.setFrameShadow(QtGui.QFrame.Raised)
        self.lilyPreviewControls.setObjectName(_fromUtf8("lilyPreviewControls"))
        self.horizontalLayout = QtGui.QHBoxLayout(self.lilyPreviewControls)
        self.horizontalLayout.setMargin(0)
        self.horizontalLayout.setObjectName(_fromUtf8("horizontalLayout"))
        self.firstLilyPage = QtGui.QPushButton(self.lilyPreviewControls)
        self.firstLilyPage.setObjectName(_fromUtf8("firstLilyPage"))
        self.horizontalLayout.addWidget(self.firstLilyPage)
        self.prevLilyPage = QtGui.QPushButton(self.lilyPreviewControls)
        self.prevLilyPage.setObjectName(_fromUtf8("prevLilyPage"))
        self.horizontalLayout.addWidget(self.prevLilyPage)
        self.refreshLilypond = QtGui.QPushButton(self.lilyPreviewControls)
        self.refreshLilypond.setObjectName(_fromUtf8("refreshLilypond"))
        self.horizontalLayout.addWidget(self.refreshLilypond)
        self.nextLilyPage = QtGui.QPushButton(self.lilyPreviewControls)
        self.nextLilyPage.setObjectName(_fromUtf8("nextLilyPage"))
        self.horizontalLayout.addWidget(self.nextLilyPage)
        self.lastLilyPage = QtGui.QPushButton(self.lilyPreviewControls)
        self.lastLilyPage.setObjectName(_fromUtf8("lastLilyPage"))
        self.horizontalLayout.addWidget(self.lastLilyPage)
        self.verticalLayout_4.addWidget(self.lilyPreviewControls)
        self.tabWidget.addTab(self.lilypondTab, icon6, _fromUtf8(""))
        self.textExportTab = QtGui.QWidget()
        self.textExportTab.setObjectName(_fromUtf8("textExportTab"))
        self.verticalLayout_5 = QtGui.QVBoxLayout(self.textExportTab)
        self.verticalLayout_5.setObjectName(_fromUtf8("verticalLayout_5"))
        self.textExportOptions = QtGui.QGroupBox(self.textExportTab)
        self.textExportOptions.setObjectName(_fromUtf8("textExportOptions"))
        self.verticalLayout_6 = QtGui.QVBoxLayout(self.textExportOptions)
        self.verticalLayout_6.setObjectName(_fromUtf8("verticalLayout_6"))
        self.gridLayout_2 = QtGui.QGridLayout()
        self.gridLayout_2.setObjectName(_fromUtf8("gridLayout_2"))
        self.textExportButton = QtGui.QPushButton(self.textExportOptions)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/format-text-bold.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.textExportButton.setIcon(icon7)
        self.textExportButton.setObjectName(_fromUtf8("textExportButton"))
        self.gridLayout_2.addWidget(self.textExportButton, 0, 4, 1, 1)
        self.emptyLineAfterSectionCheck = QtGui.QCheckBox(self.textExportOptions)
        self.emptyLineAfterSectionCheck.setChecked(True)
        self.emptyLineAfterSectionCheck.setObjectName(_fromUtf8("emptyLineAfterSectionCheck"))
        self.gridLayout_2.addWidget(self.emptyLineAfterSectionCheck, 0, 3, 1, 1)
        self.emptyLineBeforeSectionCheck = QtGui.QCheckBox(self.textExportOptions)
        self.emptyLineBeforeSectionCheck.setChecked(True)
        self.emptyLineBeforeSectionCheck.setObjectName(_fromUtf8("emptyLineBeforeSectionCheck"))
        self.gridLayout_2.addWidget(self.emptyLineBeforeSectionCheck, 0, 2, 1, 1)
        self.underlineCheck = QtGui.QCheckBox(self.textExportOptions)
        self.underlineCheck.setChecked(True)
        self.underlineCheck.setObjectName(_fromUtf8("underlineCheck"))
        self.gridLayout_2.addWidget(self.underlineCheck, 0, 0, 1, 1)
        self.sectionBracketsCheck = QtGui.QCheckBox(self.textExportOptions)
        self.sectionBracketsCheck.setTristate(False)
        self.sectionBracketsCheck.setObjectName(_fromUtf8("sectionBracketsCheck"))
        self.gridLayout_2.addWidget(self.sectionBracketsCheck, 0, 1, 1, 1)
        self.verticalLayout_6.addLayout(self.gridLayout_2)
        self.verticalLayout_5.addWidget(self.textExportOptions)
        self.textExportPreview = QtGui.QPlainTextEdit(self.textExportTab)
        font = QtGui.QFont()
        font.setFamily(_fromUtf8("Courier"))
        self.textExportPreview.setFont(font)
        self.textExportPreview.setLineWrapMode(QtGui.QPlainTextEdit.NoWrap)
        self.textExportPreview.setReadOnly(True)
        self.textExportPreview.setObjectName(_fromUtf8("textExportPreview"))
        self.verticalLayout_5.addWidget(self.textExportPreview)
        self.tabWidget.addTab(self.textExportTab, icon7, _fromUtf8(""))
        self.verticalLayout.addWidget(self.tabWidget)
        self.frame_2 = QtGui.QFrame(self.centralwidget)
        self.frame_2.setFrameShape(QtGui.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtGui.QFrame.Raised)
        self.frame_2.setObjectName(_fromUtf8("frame_2"))
        self.horizontalLayout_2 = QtGui.QHBoxLayout(self.frame_2)
        self.horizontalLayout_2.setMargin(0)
        self.horizontalLayout_2.setObjectName(_fromUtf8("horizontalLayout_2"))
        self.verticalLayout.addWidget(self.frame_2)
        DrumBurpWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtGui.QMenuBar(DrumBurpWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1268, 21))
        self.menubar.setObjectName(_fromUtf8("menubar"))
        self.menuFile = QtGui.QMenu(self.menubar)
        self.menuFile.setObjectName(_fromUtf8("menuFile"))
        self.menuRecentScores = QtGui.QMenu(self.menuFile)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/folder.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.menuRecentScores.setIcon(icon8)
        self.menuRecentScores.setObjectName(_fromUtf8("menuRecentScores"))
        self.menuView = QtGui.QMenu(self.menubar)
        self.menuView.setObjectName(_fromUtf8("menuView"))
        self.menuEdit = QtGui.QMenu(self.menubar)
        self.menuEdit.setObjectName(_fromUtf8("menuEdit"))
        self.menuHelp = QtGui.QMenu(self.menubar)
        self.menuHelp.setObjectName(_fromUtf8("menuHelp"))
        self.menuView_2 = QtGui.QMenu(self.menubar)
        self.menuView_2.setObjectName(_fromUtf8("menuView_2"))
        self.menuTool_Bars = QtGui.QMenu(self.menuView_2)
        self.menuTool_Bars.setObjectName(_fromUtf8("menuTool_Bars"))
        self.menu_MIDI = QtGui.QMenu(self.menubar)
        self.menu_MIDI.setObjectName(_fromUtf8("menu_MIDI"))
        self.menuSelectMidiOut = QtGui.QMenu(self.menu_MIDI)
        self.menuSelectMidiOut.setObjectName(_fromUtf8("menuSelectMidiOut"))
        DrumBurpWindow.setMenuBar(self.menubar)
        self.statusbar = QtGui.QStatusBar(DrumBurpWindow)
        self.statusbar.setObjectName(_fromUtf8("statusbar"))
        DrumBurpWindow.setStatusBar(self.statusbar)
        self.fileToolBar = QtGui.QToolBar(DrumBurpWindow)
        self.fileToolBar.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.fileToolBar.setMovable(True)
        self.fileToolBar.setAllowedAreas(QtCore.Qt.AllToolBarAreas)
        self.fileToolBar.setIconSize(QtCore.QSize(24, 24))
        self.fileToolBar.setObjectName(_fromUtf8("fileToolBar"))
        DrumBurpWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.fileToolBar)
        self.displayToolBar = QtGui.QToolBar(DrumBurpWindow)
        self.displayToolBar.setMovable(True)
        self.displayToolBar.setAllowedAreas(QtCore.Qt.AllToolBarAreas)
        self.displayToolBar.setIconSize(QtCore.QSize(24, 24))
        self.displayToolBar.setObjectName(_fromUtf8("displayToolBar"))
        DrumBurpWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.displayToolBar)
        self.helpToolBar = QtGui.QToolBar(DrumBurpWindow)
        self.helpToolBar.setIconSize(QtCore.QSize(24, 24))
        self.helpToolBar.setObjectName(_fromUtf8("helpToolBar"))
        DrumBurpWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.helpToolBar)
        self.fontDock = QtGui.QDockWidget(DrumBurpWindow)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fontDock.sizePolicy().hasHeightForWidth())
        self.fontDock.setSizePolicy(sizePolicy)
        self.fontDock.setMinimumSize(QtCore.QSize(400, 287))
        self.fontDock.setFloating(True)
        self.fontDock.setFeatures(QtGui.QDockWidget.AllDockWidgetFeatures)
        self.fontDock.setAllowedAreas(QtCore.Qt.NoDockWidgetArea)
        self.fontDock.setObjectName(_fromUtf8("fontDock"))
        self.dockWidgetContents_2 = QtGui.QWidget()
        self.dockWidgetContents_2.setObjectName(_fromUtf8("dockWidgetContents_2"))
        self.verticalLayout_2 = QtGui.QVBoxLayout(self.dockWidgetContents_2)
        self.verticalLayout_2.setObjectName(_fromUtf8("verticalLayout_2"))
        self.groupBox_4 = QtGui.QGroupBox(self.dockWidgetContents_2)
        self.groupBox_4.setObjectName(_fromUtf8("groupBox_4"))
        self.horizontalLayout_3 = QtGui.QHBoxLayout(self.groupBox_4)
        self.horizontalLayout_3.setObjectName(_fromUtf8("horizontalLayout_3"))
        spacerItem1 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem1)
        self.noteFontComboBox = QtGui.QComboBox(self.groupBox_4)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.noteFontComboBox.sizePolicy().hasHeightForWidth())
        self.noteFontComboBox.setSizePolicy(sizePolicy)
        self.noteFontComboBox.setObjectName(_fromUtf8("noteFontComboBox"))
        self.horizontalLayout_3.addWidget(self.noteFontComboBox)
        self.noteSizeSpinBox = QtGui.QSpinBox(self.groupBox_4)
        self.noteSizeSpinBox.setFocusPolicy(QtCore.Qt.NoFocus)
        self.noteSizeSpinBox.setMinimum(6)
        self.noteSizeSpinBox.setMaximum(30)
        self.noteSizeSpinBox.setProperty("value", 10)
        self.noteSizeSpinBox.setObjectName(_fromUtf8("noteSizeSpinBox"))
        self.horizontalLayout_3.addWidget(self.noteSizeSpinBox)
        spacerItem2 = QtGui.QSpacerItem(0, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem2)
        self.verticalLayout_2.addWidget(self.groupBox_4)
        self.groupBox_5 = QtGui.QGroupBox(self.dockWidgetContents_2)
        self.groupBox_5.setObjectName(_fromUtf8("groupBox_5"))
        self.horizontalLayout_5 = QtGui.QHBoxLayout(self.groupBox_5)
        self.horizontalLayout_5.setObjectName(_fromUtf8("horizontalLayout_5"))
        spacerItem3 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem3)
        self.sectionFontCombo = QtGui.QComboBox(self.groupBox_5)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sectionFontCombo.sizePolicy().hasHeightForWidth())
        self.sectionFontCombo.setSizePolicy(sizePolicy)
        self.sectionFontCombo.setObjectName(_fromUtf8("sectionFontCombo"))
        self.horizontalLayout_5.addWidget(self.sectionFontCombo)
        self.sectionFontSizeSpinbox = QtGui.QSpinBox(self.groupBox_5)
        self.sectionFontSizeSpinbox.setFocusPolicy(QtCore.Qt.NoFocus)
        self.sectionFontSizeSpinbox.setMinimum(8)
        self.sectionFontSizeSpinbox.setMaximum(48)
        self.sectionFontSizeSpinbox.setProperty("value", 20)
        self.sectionFontSizeSpinbox.setObjectName(_fromUtf8("sectionFontSizeSpinbox"))
        self.horizontalLayout_5.addWidget(self.sectionFontSizeSpinbox)
        spacerItem4 = QtGui.QSpacerItem(0, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem4)
        self.verticalLayout_2.addWidget(self.groupBox_5)
        self.groupBox_6 = QtGui.QGroupBox(self.dockWidgetContents_2)
        self.groupBox_6.setObjectName(_fromUtf8("groupBox_6"))
        self.horizontalLayout_4 = QtGui.QHBoxLayout(self.groupBox_6)
        self.horizontalLayout_4.setObjectName(_fromUtf8("horizontalLayout_4"))
        spacerItem5 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem5)
        self.metadataFontCombo = QtGui.QComboBox(self.groupBox_6)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.metadataFontCombo.sizePolicy().hasHeightForWidth())
        self.metadataFontCombo.setSizePolicy(sizePolicy)
        self.metadataFontCombo.setObjectName(_fromUtf8("metadataFontCombo"))
        self.horizontalLayout_4.addWidget(self.metadataFontCombo)
        self.metadataFontSizeSpinbox = QtGui.QSpinBox(self.groupBox_6)
        self.metadataFontSizeSpinbox.setFocusPolicy(QtCore.Qt.NoFocus)
        self.metadataFontSizeSpinbox.setMinimum(8)
        self.metadataFontSizeSpinbox.setMaximum(48)
        self.metadataFontSizeSpinbox.setProperty("value", 20)
        self.metadataFontSizeSpinbox.setObjectName(_fromUtf8("metadataFontSizeSpinbox"))
        self.horizontalLayout_4.addWidget(self.metadataFontSizeSpinbox)
        spacerItem6 = QtGui.QSpacerItem(0, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem6)
        self.verticalLayout_2.addWidget(self.groupBox_6)
        self.fontDock.setWidget(self.dockWidgetContents_2)
        DrumBurpWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.fontDock)
        self.MIDIToolBar = QtGui.QToolBar(DrumBurpWindow)
        self.MIDIToolBar.setObjectName(_fromUtf8("MIDIToolBar"))
        DrumBurpWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.MIDIToolBar)
        self.actionQuit = QtGui.QAction(DrumBurpWindow)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/system-log-out.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionQuit.setIcon(icon9)
        self.actionQuit.setObjectName(_fromUtf8("actionQuit"))
        self.actionNew = QtGui.QAction(DrumBurpWindow)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/document-new.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionNew.setIcon(icon10)
        self.actionNew.setObjectName(_fromUtf8("actionNew"))
        self.actionLoad = QtGui.QAction(DrumBurpWindow)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/document-open.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionLoad.setIcon(icon11)
        self.actionLoad.setObjectName(_fromUtf8("actionLoad"))
        self.actionSave = QtGui.QAction(DrumBurpWindow)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/document-save.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSave.setIcon(icon12)
        self.actionSave.setObjectName(_fromUtf8("actionSave"))
        self.actionSaveAs = QtGui.QAction(DrumBurpWindow)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/document-save-as.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSaveAs.setIcon(icon13)
        self.actionSaveAs.setObjectName(_fromUtf8("actionSaveAs"))
        self.actionExportASCII = QtGui.QAction(DrumBurpWindow)
        self.actionExportASCII.setIcon(icon7)
        self.actionExportASCII.setObjectName(_fromUtf8("actionExportASCII"))
        self.actionDisplayOptionsIsVisible = QtGui.QAction(DrumBurpWindow)
        self.actionDisplayOptionsIsVisible.setCheckable(True)
        self.actionDisplayOptionsIsVisible.setIcon(icon5)
        self.actionDisplayOptionsIsVisible.setObjectName(_fromUtf8("actionDisplayOptionsIsVisible"))
        self.actionFileToolbarIsVisible = QtGui.QAction(DrumBurpWindow)
        self.actionFileToolbarIsVisible.setCheckable(True)
        self.actionFileToolbarIsVisible.setObjectName(_fromUtf8("actionFileToolbarIsVisible"))
        self.actionFitInWindow = QtGui.QAction(DrumBurpWindow)
        self.actionFitInWindow.setIcon(icon1)
        self.actionFitInWindow.setObjectName(_fromUtf8("actionFitInWindow"))
        self.actionToolbars = QtGui.QAction(DrumBurpWindow)
        self.actionToolbars.setObjectName(_fromUtf8("actionToolbars"))
        self.actionDisplayToolBarIsVisible = QtGui.QAction(DrumBurpWindow)
        self.actionDisplayToolBarIsVisible.setCheckable(True)
        self.actionDisplayToolBarIsVisible.setObjectName(_fromUtf8("actionDisplayToolBarIsVisible"))
        self.actionPrint = QtGui.QAction(DrumBurpWindow)
        self.actionPrint.setEnabled(True)
        self.actionPrint.setIcon(icon3)
        self.actionPrint.setObjectName(_fromUtf8("actionPrint"))
        self.actionWhatsThis = QtGui.QAction(DrumBurpWindow)
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/help-browser.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionWhatsThis.setIcon(icon14)
        self.actionWhatsThis.setObjectName(_fromUtf8("actionWhatsThis"))
        self.actionUndo = QtGui.QAction(DrumBurpWindow)
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/edit-undo.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionUndo.setIcon(icon15)
        self.actionUndo.setObjectName(_fromUtf8("actionUndo"))
        self.actionRedo = QtGui.QAction(DrumBurpWindow)
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/edit-redo.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionRedo.setIcon(icon16)
        self.actionRedo.setObjectName(_fromUtf8("actionRedo"))
        self.actionExportPDF = QtGui.QAction(DrumBurpWindow)
        self.actionExportPDF.setIcon(icon4)
        self.actionExportPDF.setObjectName(_fromUtf8("actionExportPDF"))
        self.actionAboutDrumBurp = QtGui.QAction(DrumBurpWindow)
        self.actionAboutDrumBurp.setIcon(icon)
        self.actionAboutDrumBurp.setObjectName(_fromUtf8("actionAboutDrumBurp"))
        self.actionExportToolBarIsVisible = QtGui.QAction(DrumBurpWindow)
        self.actionExportToolBarIsVisible.setCheckable(True)
        self.actionExportToolBarIsVisible.setObjectName(_fromUtf8("actionExportToolBarIsVisible"))
        self.actionHelpToolBarIsVisible = QtGui.QAction(DrumBurpWindow)
        self.actionHelpToolBarIsVisible.setCheckable(True)
        self.actionHelpToolBarIsVisible.setObjectName(_fromUtf8("actionHelpToolBarIsVisible"))
        self.actionShowEmptyLines = QtGui.QAction(DrumBurpWindow)
        self.actionShowEmptyLines.setCheckable(True)
        self.actionShowEmptyLines.setChecked(True)
        icon17 = QtGui.QIcon()
        icon17.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/format-justify-fill.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionShowEmptyLines.setIcon(icon17)
        self.actionShowEmptyLines.setObjectName(_fromUtf8("actionShowEmptyLines"))
        self.actionShowDrumKey = QtGui.QAction(DrumBurpWindow)
        self.actionShowDrumKey.setCheckable(True)
        icon18 = QtGui.QIcon()
        icon18.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/1299815323_HAL-9000 Brain Room Key.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionShowDrumKey.setIcon(icon18)
        self.actionShowDrumKey.setObjectName(_fromUtf8("actionShowDrumKey"))
        self.actionShowScoreInfo = QtGui.QAction(DrumBurpWindow)
        self.actionShowScoreInfo.setCheckable(True)
        self.actionShowScoreInfo.setChecked(True)
        icon19 = QtGui.QIcon()
        icon19.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/applications-multimedia.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionShowScoreInfo.setIcon(icon19)
        self.actionShowScoreInfo.setObjectName(_fromUtf8("actionShowScoreInfo"))
        self.actionShowBeatCount = QtGui.QAction(DrumBurpWindow)
        self.actionShowBeatCount.setCheckable(True)
        self.actionShowBeatCount.setChecked(True)
        icon20 = QtGui.QIcon()
        icon20.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/1299814882_Black_Numbered-List.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionShowBeatCount.setIcon(icon20)
        self.actionShowBeatCount.setObjectName(_fromUtf8("actionShowBeatCount"))
        self.actionFitPage = QtGui.QAction(DrumBurpWindow)
        self.actionFitPage.setIcon(icon2)
        self.actionFitPage.setObjectName(_fromUtf8("actionFitPage"))
        self.actionPlayScore = QtGui.QAction(DrumBurpWindow)
        self.actionPlayScore.setCheckable(True)
        icon21 = QtGui.QIcon()
        icon21.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/media-playback-start.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon21.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/media-playback-stop.png")), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.actionPlayScore.setIcon(icon21)
        self.actionPlayScore.setObjectName(_fromUtf8("actionPlayScore"))
        self.actionMuteNotes = QtGui.QAction(DrumBurpWindow)
        self.actionMuteNotes.setCheckable(True)
        icon22 = QtGui.QIcon()
        icon22.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/audio-volume-medium.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon22.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/audio-volume-muted.png")), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.actionMuteNotes.setIcon(icon22)
        self.actionMuteNotes.setObjectName(_fromUtf8("actionMuteNotes"))
        self.actionExportMIDI = QtGui.QAction(DrumBurpWindow)
        icon23 = QtGui.QIcon()
        icon23.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/midi")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionExportMIDI.setIcon(icon23)
        self.actionExportMIDI.setObjectName(_fromUtf8("actionExportMIDI"))
        self.actionMIDIToolBarIsVisible = QtGui.QAction(DrumBurpWindow)
        self.actionMIDIToolBarIsVisible.setCheckable(True)
        self.actionMIDIToolBarIsVisible.setObjectName(_fromUtf8("actionMIDIToolBarIsVisible"))
        self.actionLoopBars = QtGui.QAction(DrumBurpWindow)
        self.actionLoopBars.setCheckable(True)
        icon24 = QtGui.QIcon()
        icon24.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/arrow-repeat.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon24.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/media-playback-stop.png")), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.actionLoopBars.setIcon(icon24)
        self.actionLoopBars.setObjectName(_fromUtf8("actionLoopBars"))
        self.actionPlayOnce = QtGui.QAction(DrumBurpWindow)
        self.actionPlayOnce.setCheckable(True)
        icon25 = QtGui.QIcon()
        icon25.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/arrow-repeat-once.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon25.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/media-playback-stop.png")), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.actionPlayOnce.setIcon(icon25)
        self.actionPlayOnce.setObjectName(_fromUtf8("actionPlayOnce"))
        self.actionCopyMeasures = QtGui.QAction(DrumBurpWindow)
        icon26 = QtGui.QIcon()
        icon26.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/edit-copy.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionCopyMeasures.setIcon(icon26)
        self.actionCopyMeasures.setObjectName(_fromUtf8("actionCopyMeasures"))
        self.actionPasteMeasures = QtGui.QAction(DrumBurpWindow)
        icon27 = QtGui.QIcon()
        icon27.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/edit-paste.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionPasteMeasures.setIcon(icon27)
        self.actionPasteMeasures.setObjectName(_fromUtf8("actionPasteMeasures"))
        self.actionClearMeasures = QtGui.QAction(DrumBurpWindow)
        self.actionClearMeasures.setObjectName(_fromUtf8("actionClearMeasures"))
        self.actionDeleteMeasures = QtGui.QAction(DrumBurpWindow)
        icon28 = QtGui.QIcon()
        icon28.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/edit-delete.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDeleteMeasures.setIcon(icon28)
        self.actionDeleteMeasures.setObjectName(_fromUtf8("actionDeleteMeasures"))
        self.actionFillPasteMeasures = QtGui.QAction(DrumBurpWindow)
        self.actionFillPasteMeasures.setIcon(icon27)
        self.actionFillPasteMeasures.setObjectName(_fromUtf8("actionFillPasteMeasures"))
        self.actionOnlineManual = QtGui.QAction(DrumBurpWindow)
        icon29 = QtGui.QIcon()
        icon29.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/book.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOnlineManual.setIcon(icon29)
        self.actionOnlineManual.setObjectName(_fromUtf8("actionOnlineManual"))
        self.actionExportLilypond = QtGui.QAction(DrumBurpWindow)
        self.actionExportLilypond.setIcon(icon6)
        self.actionExportLilypond.setObjectName(_fromUtf8("actionExportLilypond"))
        self.actionCheckForUpdates = QtGui.QAction(DrumBurpWindow)
        self.actionCheckForUpdates.setObjectName(_fromUtf8("actionCheckForUpdates"))
        self.actionCheckOnStartup = QtGui.QAction(DrumBurpWindow)
        self.actionCheckOnStartup.setCheckable(True)
        self.actionCheckOnStartup.setObjectName(_fromUtf8("actionCheckOnStartup"))
        self.actionShowMeasureCounts = QtGui.QAction(DrumBurpWindow)
        self.actionShowMeasureCounts.setCheckable(True)
        icon30 = QtGui.QIcon()
        icon30.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/accessories-calculator.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionShowMeasureCounts.setIcon(icon30)
        self.actionShowMeasureCounts.setObjectName(_fromUtf8("actionShowMeasureCounts"))
        self.actionEditColours = QtGui.QAction(DrumBurpWindow)
        icon31 = QtGui.QIcon()
        icon31.addPixmap(QtGui.QPixmap(_fromUtf8(":/Icons/Icons/preferences-desktop-locale.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionEditColours.setIcon(icon31)
        self.actionEditColours.setObjectName(_fromUtf8("actionEditColours"))
        self.actionRefreshMidiDevices = QtGui.QAction(DrumBurpWindow)
        self.actionRefreshMidiDevices.setObjectName(_fromUtf8("actionRefreshMidiDevices"))
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionLoad)
        self.menuFile.addAction(self.menuRecentScores.menuAction())
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSaveAs)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionPrint)
        self.menuFile.addAction(self.actionExportPDF)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menuView.addAction(self.actionFitInWindow)
        self.menuView.addAction(self.actionFitPage)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionShowScoreInfo)
        self.menuView.addAction(self.actionShowDrumKey)
        self.menuView.addAction(self.actionShowEmptyLines)
        self.menuView.addAction(self.actionShowBeatCount)
        self.menuView.addAction(self.actionShowMeasureCounts)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionDisplayOptionsIsVisible)
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionCopyMeasures)
        self.menuEdit.addAction(self.actionPasteMeasures)
        self.menuEdit.addAction(self.actionFillPasteMeasures)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionClearMeasures)
        self.menuEdit.addAction(self.actionDeleteMeasures)
        self.menuHelp.addAction(self.actionWhatsThis)
        self.menuHelp.addAction(self.actionOnlineManual)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionCheckForUpdates)
        self.menuHelp.addAction(self.actionCheckOnStartup)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionAboutDrumBurp)
        self.menuTool_Bars.addAction(self.actionFileToolbarIsVisible)
        self.menuTool_Bars.addAction(self.actionDisplayToolBarIsVisible)
        self.menuTool_Bars.addAction(self.actionMIDIToolBarIsVisible)
        self.menuTool_Bars.addAction(self.actionHelpToolBarIsVisible)
        self.menuView_2.addAction(self.actionEditColours)
        self.menuView_2.addAction(self.menuTool_Bars.menuAction())
        self.menuSelectMidiOut.addAction(self.actionRefreshMidiDevices)
        self.menuSelectMidiOut.addSeparator()
        self.menu_MIDI.addAction(self.actionPlayScore)
        self.menu_MIDI.addAction(self.actionPlayOnce)
        self.menu_MIDI.addAction(self.actionLoopBars)
        self.menu_MIDI.addSeparator()
        self.menu_MIDI.addAction(self.actionMuteNotes)
        self.menu_MIDI.addSeparator()
        self.menu_MIDI.addAction(self.actionExportMIDI)
        self.menu_MIDI.addSeparator()
        self.menu_MIDI.addAction(self.menuSelectMidiOut.menuAction())
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuView_2.menuAction())
        self.menubar.addAction(self.menu_MIDI.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.fileToolBar.addAction(self.actionNew)
        self.fileToolBar.addAction(self.actionLoad)
        self.fileToolBar.addAction(self.actionSave)
        self.fileToolBar.addAction(self.actionSaveAs)
        self.displayToolBar.addAction(self.actionShowScoreInfo)
        self.displayToolBar.addAction(self.actionShowDrumKey)
        self.displayToolBar.addAction(self.actionShowEmptyLines)
        self.displayToolBar.addAction(self.actionShowBeatCount)
        self.displayToolBar.addAction(self.actionShowMeasureCounts)
        self.helpToolBar.addAction(self.actionWhatsThis)
        self.helpToolBar.addAction(self.actionOnlineManual)
        self.helpToolBar.addAction(self.actionAboutDrumBurp)
        self.MIDIToolBar.addAction(self.actionPlayScore)
        self.MIDIToolBar.addAction(self.actionPlayOnce)
        self.MIDIToolBar.addAction(self.actionLoopBars)
        self.MIDIToolBar.addAction(self.actionMuteNotes)
        self.MIDIToolBar.addAction(self.actionExportMIDI)

        self.retranslateUi(DrumBurpWindow)
        self.tabWidget.setCurrentIndex(2)
        QtCore.QObject.connect(self.actionFileToolbarIsVisible, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.fileToolBar.setVisible)
        QtCore.QObject.connect(self.fileToolBar, QtCore.SIGNAL(_fromUtf8("visibilityChanged(bool)")), self.actionFileToolbarIsVisible.setChecked)
        QtCore.QObject.connect(self.displayToolBar, QtCore.SIGNAL(_fromUtf8("visibilityChanged(bool)")), self.actionDisplayToolBarIsVisible.setChecked)
        QtCore.QObject.connect(self.actionDisplayToolBarIsVisible, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.displayToolBar.setVisible)
        QtCore.QObject.connect(self.actionQuit, QtCore.SIGNAL(_fromUtf8("triggered()")), DrumBurpWindow.close)
        QtCore.QObject.connect(self.actionHelpToolBarIsVisible, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.helpToolBar.setVisible)
        QtCore.QObject.connect(self.helpToolBar, QtCore.SIGNAL(_fromUtf8("visibilityChanged(bool)")), self.actionHelpToolBarIsVisible.setChecked)
        QtCore.QObject.connect(self.fontDock, QtCore.SIGNAL(_fromUtf8("visibilityChanged(bool)")), self.actionDisplayOptionsIsVisible.setChecked)
        QtCore.QObject.connect(self.actionDisplayOptionsIsVisible, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.fontDock.setVisible)
        QtCore.QObject.connect(self.sectionFontSizeSpinbox, QtCore.SIGNAL(_fromUtf8("valueChanged(int)")), self.scoreView.setSectionFontSize)
        QtCore.QObject.connect(self.metadataFontSizeSpinbox, QtCore.SIGNAL(_fromUtf8("valueChanged(int)")), self.scoreView.setMetadataFontSize)
        QtCore.QObject.connect(self.actionShowScoreInfo, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.scoreView.setMetadataVisible)
        QtCore.QObject.connect(self.actionShowDrumKey, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.scoreView.setKitDataVisible)
        QtCore.QObject.connect(self.actionShowEmptyLines, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.scoreView.setEmptyLinesVisible)
        QtCore.QObject.connect(self.actionShowBeatCount, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.scoreView.setBeatCountVisible)
        QtCore.QObject.connect(self.actionShowScoreInfo, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.metadataFontSizeSpinbox.setEnabled)
        QtCore.QObject.connect(self.widthSpinBox, QtCore.SIGNAL(_fromUtf8("valueChanged(int)")), self.scoreView.setWidth)
        QtCore.QObject.connect(self.lineSpaceSlider, QtCore.SIGNAL(_fromUtf8("valueChanged(int)")), self.scoreView.systemSpacingChanged)
        QtCore.QObject.connect(self.scoreView, QtCore.SIGNAL(_fromUtf8("widthChanged(int)")), self.widthSpinBox.setValue)
        QtCore.QObject.connect(self.fontsButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.actionDisplayOptionsIsVisible.trigger)
        QtCore.QObject.connect(self.actionDisplayOptionsIsVisible, QtCore.SIGNAL(_fromUtf8("triggered()")), self.fontDock.raise_)
        QtCore.QObject.connect(self.sectionNavigator, QtCore.SIGNAL(_fromUtf8("currentIndexChanged(int)")), self.scoreView.showSection)
        QtCore.QObject.connect(self.actionMIDIToolBarIsVisible, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.MIDIToolBar.setVisible)
        QtCore.QObject.connect(self.MIDIToolBar, QtCore.SIGNAL(_fromUtf8("visibilityChanged(bool)")), self.actionMIDIToolBarIsVisible.setChecked)
        QtCore.QObject.connect(self.lilypondSize, QtCore.SIGNAL(_fromUtf8("valueChanged(int)")), self.scoreView.setLilypondSize)
        QtCore.QObject.connect(self.lilyPagesBox, QtCore.SIGNAL(_fromUtf8("valueChanged(int)")), self.scoreView.setLilypondPages)
        QtCore.QObject.connect(self.lilyFillButton, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.scoreView.setLilyFill)
        QtCore.QObject.connect(self.actionShowMeasureCounts, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.scoreView.setMeasureCountsVisible)
        QtCore.QObject.connect(self.exportLilypondButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.actionExportLilypond.trigger)
        QtCore.QObject.connect(self.textExportButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.actionExportASCII.trigger)
        QtCore.QObject.connect(self.FitWindowButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.actionFitInWindow.trigger)
        QtCore.QObject.connect(self.FitPageButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.actionFitPage.trigger)
        QtCore.QObject.connect(self.PrintScoreButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.actionPrint.trigger)
        QtCore.QObject.connect(self.PrintPdfButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.actionExportPDF.trigger)
        QtCore.QObject.connect(self.noteSizeSpinBox, QtCore.SIGNAL(_fromUtf8("valueChanged(int)")), self.scoreView.setNoteFontSize)
        QtCore.QMetaObject.connectSlotsByName(DrumBurpWindow)
        DrumBurpWindow.setTabOrder(self.tabWidget, self.FitWindowButton)
        DrumBurpWindow.setTabOrder(self.FitWindowButton, self.FitPageButton)
        DrumBurpWindow.setTabOrder(self.FitPageButton, self.PrintScoreButton)
        DrumBurpWindow.setTabOrder(self.PrintScoreButton, self.PrintPdfButton)
        DrumBurpWindow.setTabOrder(self.PrintPdfButton, self.sectionNavigator)
        DrumBurpWindow.setTabOrder(self.sectionNavigator, self.paperBox)
        DrumBurpWindow.setTabOrder(self.paperBox, self.widthSpinBox)
        DrumBurpWindow.setTabOrder(self.widthSpinBox, self.lineSpaceSlider)
        DrumBurpWindow.setTabOrder(self.lineSpaceSlider, self.defaultMeasureButton)
        DrumBurpWindow.setTabOrder(self.defaultMeasureButton, self.fontsButton)
        DrumBurpWindow.setTabOrder(self.fontsButton, self.lilyPagesBox)
        DrumBurpWindow.setTabOrder(self.lilyPagesBox, self.lilypondSize)
        DrumBurpWindow.setTabOrder(self.lilypondSize, self.lilyFillButton)
        DrumBurpWindow.setTabOrder(self.lilyFillButton, self.lilyPdfButton)
        DrumBurpWindow.setTabOrder(self.lilyPdfButton, self.lilyPsButton)
        DrumBurpWindow.setTabOrder(self.lilyPsButton, self.lilyPngButton)
        DrumBurpWindow.setTabOrder(self.lilyPngButton, self.lilypondPathButton)
        DrumBurpWindow.setTabOrder(self.lilypondPathButton, self.exportLilypondButton)
        DrumBurpWindow.setTabOrder(self.exportLilypondButton, self.lilyPreview)
        DrumBurpWindow.setTabOrder(self.lilyPreview, self.firstLilyPage)
        DrumBurpWindow.setTabOrder(self.firstLilyPage, self.prevLilyPage)
        DrumBurpWindow.setTabOrder(self.prevLilyPage, self.refreshLilypond)
        DrumBurpWindow.setTabOrder(self.refreshLilypond, self.nextLilyPage)
        DrumBurpWindow.setTabOrder(self.nextLilyPage, self.lastLilyPage)
        DrumBurpWindow.setTabOrder(self.lastLilyPage, self.underlineCheck)
        DrumBurpWindow.setTabOrder(self.underlineCheck, self.sectionBracketsCheck)
        DrumBurpWindow.setTabOrder(self.sectionBracketsCheck, self.emptyLineBeforeSectionCheck)
        DrumBurpWindow.setTabOrder(self.emptyLineBeforeSectionCheck, self.emptyLineAfterSectionCheck)
        DrumBurpWindow.setTabOrder(self.emptyLineAfterSectionCheck, self.textExportButton)
        DrumBurpWindow.setTabOrder(self.textExportButton, self.textExportPreview)
        DrumBurpWindow.setTabOrder(self.textExportPreview, self.noteFontComboBox)
        DrumBurpWindow.setTabOrder(self.noteFontComboBox, self.sectionFontCombo)
        DrumBurpWindow.setTabOrder(self.sectionFontCombo, self.metadataFontCombo)

    def retranslateUi(self, DrumBurpWindow):
        DrumBurpWindow.setWindowTitle(_translate("DrumBurpWindow", "DrumBurp", None))
        self.scoreActionsBox.setTitle(_translate("DrumBurpWindow", "Actions", None))
        self.FitWindowButton.setToolTip(_translate("DrumBurpWindow", "Fit score in window.", None))
        self.FitWindowButton.setStatusTip(_translate("DrumBurpWindow", "Attempt to make the score as wide as possible within the current window.", None))
        self.FitWindowButton.setWhatsThis(_translate("DrumBurpWindow", "Try to make the score fit in the editing window.\n"
"\n"
"The score width defines how many columns are displayed in the editing window. Selecting this operation tries to set the score width to as many columns as possible so that they will all be visible in the editing window.\n"
"\n"
"Note: if you subsequently change the window size, you\'ll need to select this operation again to fit the score in the window.", None))
        self.FitPageButton.setToolTip(_translate("DrumBurpWindow", "Fit score to page.", None))
        self.FitPageButton.setStatusTip(_translate("DrumBurpWindow", "Attempt to make the score as wide as possible within the current page size.", None))
        self.FitPageButton.setWhatsThis(_translate("DrumBurpWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Try to make the score fit in the currently selected page size.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">The score width defines how many columns are displayed in the editing window. Selecting this operation tries to set the score width to as many columns as possible so that they will fit in the page size currently selected. The number of columns that fits in a given page depends on the note font size.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Note: if you subsequently change the page size, you\'ll need to select this operation again to fit the score in the page.</span></p></body></html>", None))
        self.PrintScoreButton.setToolTip(_translate("DrumBurpWindow", "Print this score.", None))
        self.PrintScoreButton.setStatusTip(_translate("DrumBurpWindow", "Print this score.", None))
        self.PrintScoreButton.setWhatsThis(_translate("DrumBurpWindow", "Print the score.\n"
"\n"
"Selecting this option will try to print the score to whatever printer you choose. You\'ll see a print preview dialog before printing occurs; you can use this to check that you\'re going to get what you expect.", None))
        self.PrintPdfButton.setToolTip(_translate("DrumBurpWindow", "Export to PDF", None))
        self.PrintPdfButton.setStatusTip(_translate("DrumBurpWindow", "Export this score to a PDF file", None))
        self.PrintPdfButton.setWhatsThis(_translate("DrumBurpWindow", "Export this score to a PDF file.\n"
"\n"
"If you want to share the score you\'ve written, it may be easier to do it as a PDF file. Select this option to write the score to a PDF: you\'ll see a print preview dialog before it exports, so you can check what you\'ll be getting.", None))
        self.sectionNavigator.setToolTip(_translate("DrumBurpWindow", "Section navigator", None))
        self.sectionNavigator.setStatusTip(_translate("DrumBurpWindow", "Quickly jump to a section of the score", None))
        self.sectionNavigator.setWhatsThis(_translate("DrumBurpWindow", "Section navigator\n"
"\n"
"Sections in the score are defined by a section end barline, and the title that appears before it. You can quickly jump to the beginning of any section defined in the current score by selecting it from this drop down box.", None))
        self.scorePropertiesGroup.setTitle(_translate("DrumBurpWindow", "Score Properties", None))
        self.paperBox.setToolTip(_translate("DrumBurpWindow", "Page size", None))
        self.paperBox.setStatusTip(_translate("DrumBurpWindow", "Select the page size", None))
        self.paperBox.setWhatsThis(_translate("DrumBurpWindow", "Set the page size.\n"
"\n"
"The page size determines the number of pages used by the current font size and score width settings, as well as affecting printing and PDF export.", None))
        self.paperBox.setItemText(0, _translate("DrumBurpWindow", "A4", None))
        self.paperBox.setItemText(1, _translate("DrumBurpWindow", "Letter", None))
        self.widthSpinBox.setToolTip(_translate("DrumBurpWindow", "Score width", None))
        self.widthSpinBox.setStatusTip(_translate("DrumBurpWindow", "The number of columns to display the score with", None))
        self.widthSpinBox.setWhatsThis(_translate("DrumBurpWindow", "The score width\n"
"\n"
"The score width is the number of columns used to display the current score. DrumBurp will try to add each measure to a staff until the score width is reached, then following measure will be added to the next staff. \n"
"\n"
"The score width can be whatever you want it to be. When you\'re creating a score, you might want to use as much screen real estate as possible, so you could use the \'Fit to Window\' option. \n"
"\n"
"However, when you print, or export to PDF/ASCII, you might want the width to be something which fits on a page: use the \'Fit to Page\' option then.", None))
        self.lineSpaceSlider.setToolTip(_translate("DrumBurpWindow", "Inter-staff distance", None))
        self.lineSpaceSlider.setStatusTip(_translate("DrumBurpWindow", "The distance between each staff in the score", None))
        self.lineSpaceSlider.setWhatsThis(_translate("DrumBurpWindow", "Change the distance between each staff in the score.\n"
"\n"
"Each staff in the score is placed by DrumBurp with a certain amount of space separating them. You can adjust how much space is used with this slider.", None))
        self.defaultMeasureButton.setToolTip(_translate("DrumBurpWindow", "Default count", None))
        self.defaultMeasureButton.setStatusTip(_translate("DrumBurpWindow", "The default count to use for new measures", None))
        self.defaultMeasureButton.setWhatsThis(_translate("DrumBurpWindow", "Display and edit the default measure count.\n"
"\n"
"A score has a default measure count: this is the count that is given to new measures by default. This count is displayed here. You can change the default count with the dialog that comes up when you click here.", None))
        self.defaultMeasureButton.setText(_translate("DrumBurpWindow", "MeasureCount", None))
        self.fontsButton.setToolTip(_translate("DrumBurpWindow", "Fonts", None))
        self.fontsButton.setStatusTip(_translate("DrumBurpWindow", "Adjust the fonts used by this score", None))
        self.fontsButton.setWhatsThis(_translate("DrumBurpWindow", "Show/hide the font selection window.\n"
"\n"
"The font window is a floating dialog that you can use to adjust the fonts used to display the score. This button shows/hides it when you toggle it.", None))
        self.scoreView.setWhatsThis(_translate("DrumBurpWindow", "The score editing window.\n"
"\n"
"This window displays the current score, and allows you to edit.\n"
"\n"
"To add a note, just click where you want it to appear. To add a note with a different symbol, middle-click and select from the menu. For other operations, right-click on notes, measures and measure lines: a context menu will tell you what you can do.\n"
"\n"
"To edit nearly anything else, double click on it: the count of a measure, repeat markers, score information, the drumkit.\n"
"\n"
"To select a measure/measures, click and drag: selected measures can be copy/pasted, deleted, cleared, and more.", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.textTab), _translate("DrumBurpWindow", "Score Editor", None))
        self.lilypondGroupBox.setTitle(_translate("DrumBurpWindow", "Lilypond Options", None))
        self.lilyPngButton.setToolTip(_translate("DrumBurpWindow", "PNG format", None))
        self.lilyPngButton.setStatusTip(_translate("DrumBurpWindow", "Generate PNG output with Lilypond.", None))
        self.lilyPngButton.setWhatsThis(_translate("DrumBurpWindow", "<html><head/><body><p>Lilypond can generate output in 3 formats: PDF, PostScript or PNG.</p><p><br/></p><p>Selecting this option will generate PNG output.</p></body></html>", None))
        self.lilyPngButton.setText(_translate("DrumBurpWindow", "PNG", None))
        self.lilyPsButton.setToolTip(_translate("DrumBurpWindow", "PS format", None))
        self.lilyPsButton.setStatusTip(_translate("DrumBurpWindow", "Generate PS output with Lilypond.", None))
        self.lilyPsButton.setWhatsThis(_translate("DrumBurpWindow", "<html><head/><body><p>Lilypond can generate output in 3 formats: PDF, PostScript or PNG.</p><p><br/></p><p>Selecting this option will generate PostScript output.</p></body></html>", None))
        self.lilyPsButton.setText(_translate("DrumBurpWindow", "PS", None))
        self.lilyFillButton.setToolTip(_translate("DrumBurpWindow", "Fill the last page of Lilypond export", None))
        self.lilyFillButton.setStatusTip(_translate("DrumBurpWindow", "Fill the last page of Lilypond export", None))
        self.lilyFillButton.setWhatsThis(_translate("DrumBurpWindow", "<html><head/><body><p>Lilypond export can be set to fill the last page of the score with music, or to just stop halfway down the page when it runs out of staffs.</p><p><br/></p><p>Check this box to fill the last page of the score.</p></body></html>", None))
        self.lilyFillButton.setText(_translate("DrumBurpWindow", "Fill last page", None))
        self.exportLilypondButton.setToolTip(_translate("DrumBurpWindow", "Export to Lilypond", None))
        self.exportLilypondButton.setStatusTip(_translate("DrumBurpWindow", "Export & run Lilypond on this score.", None))
        self.exportLilypondButton.setWhatsThis(_translate("DrumBurpWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Export this score to a Lilypond file, and run Lilypond on it.</p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Lilypond is a TeX based music typesetting system available from <a href=\"http://www.lilypond.org\"><span style=\" text-decoration: underline; color:#0000ff;\">lilypond.org</span></a>. DrumBurp can export its scores to the Lilypond input format, and run Lilypond on them to generate beautiful notation as output.</p></body></html>", None))
        self.exportLilypondButton.setText(_translate("DrumBurpWindow", "Export", None))
        self.lilyPagesBox.setToolTip(_translate("DrumBurpWindow", "Number of Lilypond pages", None))
        self.lilyPagesBox.setStatusTip(_translate("DrumBurpWindow", "Force Lilypond to write this score to a given number of pages. (0 lets Lilypond decide)", None))
        self.lilyPagesBox.setWhatsThis(_translate("DrumBurpWindow", "<html><head/><body><p>Set this value to force Lilypond export to fit on the given number of pages.</p><p><br/></p><p>If the value is zero then Lilypond will set the score on as many pages as it wants.</p></body></html>", None))
        self.lilyPagesBox.setSuffix(_translate("DrumBurpWindow", " pages", None))
        self.lilypondPathButton.setToolTip(_translate("DrumBurpWindow", "Set the path to Lilypond", None))
        self.lilypondPathButton.setStatusTip(_translate("DrumBurpWindow", "Set the path to Lilypond", None))
        self.lilypondPathButton.setWhatsThis(_translate("DrumBurpWindow", "<html><head/><body><p>DrumBurp uses <a href=\"https://www.lilypond.org\"><span style=\" text-decoration: underline; color:#0000ff;\">Lilypond</span></a> to generate beautiful notation.</p><p><br/></p><p>To use this feature, you must install Lilypond and tell DrumBurp where to find it. Use this button to set the path to the Lilypond executable. This will be in the usr/bin directory of the Lilypond installation, and it will be called lilypond.exe on Windows, or lilypond on Linux.</p></body></html>", None))
        self.lilypondPathButton.setText(_translate("DrumBurpWindow", "Path", None))
        self.lilypondSize.setToolTip(_translate("DrumBurpWindow", "Lilypond export size", None))
        self.lilypondSize.setStatusTip(_translate("DrumBurpWindow", "Change the size of Lilypond export.", None))
        self.lilypondSize.setWhatsThis(_translate("DrumBurpWindow", "Lilypond allows one to set a global size which affects how big the staves, notes, and text in a score are. It defaults to 20. By altering this parameter, one can make the output of a Lilypond exported DrumBurp score bigger or smaller.", None))
        self.lilyPdfButton.setToolTip(_translate("DrumBurpWindow", "PDF format", None))
        self.lilyPdfButton.setStatusTip(_translate("DrumBurpWindow", "Generate PDF output with Lilypond.", None))
        self.lilyPdfButton.setWhatsThis(_translate("DrumBurpWindow", "<html><head/><body><p>Lilypond can generate output in 3 formats: PDF, PostScript or PNG.</p><p><br/></p><p>Selecting this option will generate PDF output.</p></body></html>", None))
        self.lilyPdfButton.setText(_translate("DrumBurpWindow", "PDF", None))
        self.firstLilyPage.setToolTip(_translate("DrumBurpWindow", "First page", None))
        self.firstLilyPage.setStatusTip(_translate("DrumBurpWindow", "First pagePrevious page of the Lilypond preview", None))
        self.firstLilyPage.setWhatsThis(_translate("DrumBurpWindow", "First pagePrevious page of the Lilypond preview", None))
        self.firstLilyPage.setText(_translate("DrumBurpWindow", "First", None))
        self.prevLilyPage.setToolTip(_translate("DrumBurpWindow", "Previous page", None))
        self.prevLilyPage.setStatusTip(_translate("DrumBurpWindow", "Previous page of the Lilypond preview", None))
        self.prevLilyPage.setWhatsThis(_translate("DrumBurpWindow", "Previous page of the Lilypond preview", None))
        self.prevLilyPage.setText(_translate("DrumBurpWindow", "Previous", None))
        self.refreshLilypond.setToolTip(_translate("DrumBurpWindow", "Preview the Lilypond output.", None))
        self.refreshLilypond.setStatusTip(_translate("DrumBurpWindow", "Preview the Lilypond output.", None))
        self.refreshLilypond.setWhatsThis(_translate("DrumBurpWindow", "<html><head/><body><p>Press this button to preview the output that Lilypond will generate from the current score, or to refresh the preview.</p></body></html>", None))
        self.refreshLilypond.setText(_translate("DrumBurpWindow", "Refresh", None))
        self.nextLilyPage.setToolTip(_translate("DrumBurpWindow", "Next page", None))
        self.nextLilyPage.setStatusTip(_translate("DrumBurpWindow", "Next page of the Lilypond preview", None))
        self.nextLilyPage.setWhatsThis(_translate("DrumBurpWindow", "Next page of the Lilypond preview", None))
        self.nextLilyPage.setText(_translate("DrumBurpWindow", "Next", None))
        self.lastLilyPage.setToolTip(_translate("DrumBurpWindow", "Last page", None))
        self.lastLilyPage.setStatusTip(_translate("DrumBurpWindow", "Last page of the Lilypond preview", None))
        self.lastLilyPage.setWhatsThis(_translate("DrumBurpWindow", "Last page of the Lilypond preview", None))
        self.lastLilyPage.setText(_translate("DrumBurpWindow", "Last", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.lilypondTab), _translate("DrumBurpWindow", "Lilypond Output", None))
        self.textExportOptions.setTitle(_translate("DrumBurpWindow", "Text Options", None))
        self.textExportButton.setToolTip(_translate("DrumBurpWindow", "Export to file", None))
        self.textExportButton.setStatusTip(_translate("DrumBurpWindow", "Export the score to a text file.", None))
        self.textExportButton.setWhatsThis(_translate("DrumBurpWindow", "Export the score to a text file.", None))
        self.textExportButton.setText(_translate("DrumBurpWindow", "Export", None))
        self.emptyLineAfterSectionCheck.setToolTip(_translate("DrumBurpWindow", "Include a blank line after each section title", None))
        self.emptyLineAfterSectionCheck.setStatusTip(_translate("DrumBurpWindow", "Include a blank line after each section title", None))
        self.emptyLineAfterSectionCheck.setWhatsThis(_translate("DrumBurpWindow", "Include a blank line after each section title", None))
        self.emptyLineAfterSectionCheck.setText(_translate("DrumBurpWindow", "Empty line after section title", None))
        self.emptyLineBeforeSectionCheck.setToolTip(_translate("DrumBurpWindow", "Include a blank line before each section title", None))
        self.emptyLineBeforeSectionCheck.setStatusTip(_translate("DrumBurpWindow", "Include a blank line before each section title", None))
        self.emptyLineBeforeSectionCheck.setWhatsThis(_translate("DrumBurpWindow", "Include a blank line before each section title", None))
        self.emptyLineBeforeSectionCheck.setText(_translate("DrumBurpWindow", "Empty line before section title", None))
        self.underlineCheck.setToolTip(_translate("DrumBurpWindow", "Underline each section title", None))
        self.underlineCheck.setStatusTip(_translate("DrumBurpWindow", "Underline each section title", None))
        self.underlineCheck.setWhatsThis(_translate("DrumBurpWindow", "Underline each section title", None))
        self.underlineCheck.setText(_translate("DrumBurpWindow", "Underline section titles with ~ characters", None))
        self.sectionBracketsCheck.setToolTip(_translate("DrumBurpWindow", "Add square brackets around each section title", None))
        self.sectionBracketsCheck.setStatusTip(_translate("DrumBurpWindow", "Add square brackets around each section title", None))
        self.sectionBracketsCheck.setWhatsThis(_translate("DrumBurpWindow", "Add square brackets around each section title", None))
        self.sectionBracketsCheck.setText(_translate("DrumBurpWindow", "Surround section titles with brackets", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.textExportTab), _translate("DrumBurpWindow", "Text Export", None))
        self.menuFile.setStatusTip(_translate("DrumBurpWindow", "Operations on the DrumBurp Score", None))
        self.menuFile.setTitle(_translate("DrumBurpWindow", "&File", None))
        self.menuRecentScores.setToolTip(_translate("DrumBurpWindow", "Recently opened scores", None))
        self.menuRecentScores.setStatusTip(_translate("DrumBurpWindow", "Open recently visited scores", None))
        self.menuRecentScores.setTitle(_translate("DrumBurpWindow", "&Recent Scores...", None))
        self.menuView.setStatusTip(_translate("DrumBurpWindow", "Options affecting the view", None))
        self.menuView.setTitle(_translate("DrumBurpWindow", "&Score", None))
        self.menuEdit.setTitle(_translate("DrumBurpWindow", "&Edit", None))
        self.menuHelp.setTitle(_translate("DrumBurpWindow", "&Help", None))
        self.menuView_2.setTitle(_translate("DrumBurpWindow", "&View", None))
        self.menuTool_Bars.setTitle(_translate("DrumBurpWindow", "Tool Bars...", None))
        self.menu_MIDI.setTitle(_translate("DrumBurpWindow", "&MIDI", None))
        self.menuSelectMidiOut.setTitle(_translate("DrumBurpWindow", "Select MIDI out", None))
        self.fileToolBar.setWindowTitle(_translate("DrumBurpWindow", "File", None))
        self.displayToolBar.setWindowTitle(_translate("DrumBurpWindow", "Display", None))
        self.helpToolBar.setWindowTitle(_translate("DrumBurpWindow", "Help", None))
        self.fontDock.setToolTip(_translate("DrumBurpWindow", "Score Fonts", None))
        self.fontDock.setStatusTip(_translate("DrumBurpWindow", "Set the fonts used to display the Score", None))
        self.fontDock.setWhatsThis(_translate("DrumBurpWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">There are 3 fonts used to display the Score, and they can be set in this dialog.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- The &quot;Note Font&quot; is used to display the notes themselves, the measure count, and any repeat indicators.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- The &quot;Section Title Font&quot; is used to display section titles.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- The &quot;Song Properties Font&quot; is used to display the song details, such as name, artist, etc.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p></body></html>", None))
        self.fontDock.setWindowTitle(_translate("DrumBurpWindow", "Fonts", None))
        self.groupBox_4.setToolTip(_translate("DrumBurpWindow", "Change the font used to display notes", None))
        self.groupBox_4.setStatusTip(_translate("DrumBurpWindow", "Change the font used to display notes", None))
        self.groupBox_4.setWhatsThis(_translate("DrumBurpWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Change the font used to display notes</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">The score editing window uses this setting to display the notes in the score. Changing the font and/or size here will affect how these are displayed.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">This setting is also used to determine the font for: the drum key; the measure counts; and the drum name abbreviations at the left hand side of each staff.</span></p></body></html>", None))
        self.groupBox_4.setTitle(_translate("DrumBurpWindow", "Note Font", None))
        self.noteSizeSpinBox.setStatusTip(_translate("DrumBurpWindow", "Size of notes.", None))
        self.groupBox_5.setToolTip(_translate("DrumBurpWindow", "Change the font used to display section titles", None))
        self.groupBox_5.setStatusTip(_translate("DrumBurpWindow", "Change the font used to display section titles", None))
        self.groupBox_5.setWhatsThis(_translate("DrumBurpWindow", "Change the font used to display section titles\n"
"\n"
"The score editing window uses the font selected here to display the section titles in the score.", None))
        self.groupBox_5.setTitle(_translate("DrumBurpWindow", "Section Title Font", None))
        self.sectionFontSizeSpinbox.setStatusTip(_translate("DrumBurpWindow", "Size of section titles.", None))
        self.groupBox_6.setToolTip(_translate("DrumBurpWindow", "Change the font used to display the score information", None))
        self.groupBox_6.setStatusTip(_translate("DrumBurpWindow", "Change the font used to display the score information", None))
        self.groupBox_6.setWhatsThis(_translate("DrumBurpWindow", "Change the font used to display the score information\n"
"\n"
"The score editing window uses the font selected here to display the score information: the song title, artist name, tabber name and BPM.", None))
        self.groupBox_6.setTitle(_translate("DrumBurpWindow", "Song Information Font", None))
        self.metadataFontSizeSpinbox.setStatusTip(_translate("DrumBurpWindow", "Size of section titles.", None))
        self.MIDIToolBar.setWindowTitle(_translate("DrumBurpWindow", "MIDI ToolBar", None))
        self.actionQuit.setText(_translate("DrumBurpWindow", "&Quit", None))
        self.actionQuit.setToolTip(_translate("DrumBurpWindow", "Quit DrumBurp", None))
        self.actionQuit.setStatusTip(_translate("DrumBurpWindow", "Quit DrumBurp", None))
        self.actionQuit.setShortcut(_translate("DrumBurpWindow", "Ctrl+Q", None))
        self.actionNew.setText(_translate("DrumBurpWindow", "&New", None))
        self.actionNew.setIconText(_translate("DrumBurpWindow", "New", None))
        self.actionNew.setToolTip(_translate("DrumBurpWindow", "New Score", None))
        self.actionNew.setStatusTip(_translate("DrumBurpWindow", "Create a new blank score", None))
        self.actionNew.setWhatsThis(_translate("DrumBurpWindow", "Clicking this button will create a new blank score. \n"
"\n"
"You\'ll get the option to save the current score if there are any unsaved changes, or to cancel this operation.\n"
"\n"
"You\'ll be asked how you want the new score set up, then it will appear in the editing window.", None))
        self.actionNew.setShortcut(_translate("DrumBurpWindow", "Ctrl+N", None))
        self.actionLoad.setText(_translate("DrumBurpWindow", "&Open", None))
        self.actionLoad.setToolTip(_translate("DrumBurpWindow", "Open Score", None))
        self.actionLoad.setStatusTip(_translate("DrumBurpWindow", "Load a saved DrumBurp score", None))
        self.actionLoad.setWhatsThis(_translate("DrumBurpWindow", "Load a score from a .brp file.\n"
"\n"
"If you have any unsaved changes, you\'ll be asked if you want to cancel this operation, or if you want to save the changes and proceed.\n"
"\n"
"You\'ll then be asked to pick a .brp file from your hard drive. DrumBurp will try to load it and then display it in the editing window.", None))
        self.actionLoad.setShortcut(_translate("DrumBurpWindow", "Ctrl+O", None))
        self.actionSave.setText(_translate("DrumBurpWindow", "&Save", None))
        self.actionSave.setStatusTip(_translate("DrumBurpWindow", "Save this DrumBurp score", None))
        self.actionSave.setWhatsThis(_translate("DrumBurpWindow", "Save the current score to a file on disk.\n"
"\n"
"If you\'ve previously saved this score, any new changes will be written to the same file. If you haven\'t saved it before, you\'ll be asked to pick a file to save the score to. You\'ll then be able to open this score in DrumBurp again in the future for further editing.", None))
        self.actionSave.setShortcut(_translate("DrumBurpWindow", "Ctrl+S", None))
        self.actionSaveAs.setText(_translate("DrumBurpWindow", "Save &As", None))
        self.actionSaveAs.setStatusTip(_translate("DrumBurpWindow", "Save this DrumBurp score with a new name", None))
        self.actionSaveAs.setWhatsThis(_translate("DrumBurpWindow", "Save this score to a new file.\n"
"\n"
"If you\'ve saved this score before, and you now want to save it to a different file, use this option. You\'ll be asked to pick or create a new .brp file to save to.", None))
        self.actionExportASCII.setText(_translate("DrumBurpWindow", "&Export ASCII", None))
        self.actionExportASCII.setStatusTip(_translate("DrumBurpWindow", "Write an ASCII representation of this score to a file", None))
        self.actionExportASCII.setWhatsThis(_translate("DrumBurpWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Export this Score to an ASCII file.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Writes this Score as a plain .txt file. You\'ll see a dialog with options regarding exactly how the score is exported.</span></p></body></html>", None))
        self.actionDisplayOptionsIsVisible.setText(_translate("DrumBurpWindow", "Choose &Fonts...", None))
        self.actionDisplayOptionsIsVisible.setToolTip(_translate("DrumBurpWindow", "Toggle visibility of font window", None))
        self.actionDisplayOptionsIsVisible.setStatusTip(_translate("DrumBurpWindow", "Toggle display of font window", None))
        self.actionFileToolbarIsVisible.setText(_translate("DrumBurpWindow", "&File", None))
        self.actionFileToolbarIsVisible.setToolTip(_translate("DrumBurpWindow", "Change visibility of File tool bar", None))
        self.actionFileToolbarIsVisible.setStatusTip(_translate("DrumBurpWindow", "Change visibility of File tool bar", None))
        self.actionFitInWindow.setText(_translate("DrumBurpWindow", "Fit &Window", None))
        self.actionFitInWindow.setToolTip(_translate("DrumBurpWindow", "Fit score in window", None))
        self.actionFitInWindow.setStatusTip(_translate("DrumBurpWindow", "Attempt to make the score as wide as possible within the current window.", None))
        self.actionFitInWindow.setWhatsThis(_translate("DrumBurpWindow", "Try to make the score fit in the editing window.\n"
"\n"
"The score width defines how many columns are displayed in the editing window. Selecting this operation tries to set the score width to as many columns as possible so that they will all be visible in the editing window.\n"
"\n"
"Note: if you subsequently change the window size, you\'ll need to select this operation again to fit the score in the window.", None))
        self.actionToolbars.setText(_translate("DrumBurpWindow", "Toolbars", None))
        self.actionDisplayToolBarIsVisible.setText(_translate("DrumBurpWindow", "&Display", None))
        self.actionDisplayToolBarIsVisible.setToolTip(_translate("DrumBurpWindow", "Change visibility of Display tool bar", None))
        self.actionDisplayToolBarIsVisible.setStatusTip(_translate("DrumBurpWindow", "Change visibility of Display tool bar", None))
        self.actionPrint.setText(_translate("DrumBurpWindow", "&Print", None))
        self.actionPrint.setToolTip(_translate("DrumBurpWindow", "Print this score", None))
        self.actionPrint.setStatusTip(_translate("DrumBurpWindow", "Print this score", None))
        self.actionPrint.setWhatsThis(_translate("DrumBurpWindow", "Print the score.\n"
"\n"
"Selecting this option will try to print the score to whatever printer you choose. You\'ll see a print preview dialog before printing occurs; you can use this to check that you\'re going to get what you expect.", None))
        self.actionPrint.setShortcut(_translate("DrumBurpWindow", "Ctrl+P", None))
        self.actionWhatsThis.setText(_translate("DrumBurpWindow", "&What\'s this?", None))
        self.actionWhatsThis.setToolTip(_translate("DrumBurpWindow", "Get help on DrumBurp elements", None))
        self.actionWhatsThis.setStatusTip(_translate("DrumBurpWindow", "Get help on DrumBurp elements", None))
        self.actionWhatsThis.setWhatsThis(_translate("DrumBurpWindow", "What\'s this?\n"
"\n"
"Get a little more help on any DrumBurp element. Select this option then click on something you want to know more about.", None))
        self.actionWhatsThis.setShortcut(_translate("DrumBurpWindow", "Shift+F1", None))
        self.actionUndo.setText(_translate("DrumBurpWindow", "&Undo", None))
        self.actionUndo.setToolTip(_translate("DrumBurpWindow", "Undo the last action", None))
        self.actionUndo.setStatusTip(_translate("DrumBurpWindow", "Undo the last action", None))
        self.actionUndo.setShortcut(_translate("DrumBurpWindow", "Ctrl+Z", None))
        self.actionRedo.setText(_translate("DrumBurpWindow", "&Redo", None))
        self.actionRedo.setToolTip(_translate("DrumBurpWindow", "Redo the last undone action", None))
        self.actionRedo.setStatusTip(_translate("DrumBurpWindow", "Redo the last undone action", None))
        self.actionRedo.setShortcut(_translate("DrumBurpWindow", "Ctrl+Y", None))
        self.actionExportPDF.setText(_translate("DrumBurpWindow", "E&xport PDF", None))
        self.actionExportPDF.setToolTip(_translate("DrumBurpWindow", "Export PDF", None))
        self.actionExportPDF.setStatusTip(_translate("DrumBurpWindow", "Export this score to a PDF file", None))
        self.actionExportPDF.setWhatsThis(_translate("DrumBurpWindow", "Export this score to a PDF file.\n"
"\n"
"If you want to share the score you\'ve written, it may be easier to do it as a PDF file. Select this option to write the score to a PDF: you\'ll see a print preview dialog before it exports, so you can check what you\'ll be getting.", None))
        self.actionAboutDrumBurp.setText(_translate("DrumBurpWindow", "&About DrumBurp", None))
        self.actionAboutDrumBurp.setStatusTip(_translate("DrumBurpWindow", "About DrumBurp", None))
        self.actionAboutDrumBurp.setWhatsThis(_translate("DrumBurpWindow", "More about DrumBurp.\n"
"\n"
"Tells you some info about where DrumBurp comes from and how it is made.", None))
        self.actionExportToolBarIsVisible.setText(_translate("DrumBurpWindow", "&Print && Export", None))
        self.actionExportToolBarIsVisible.setToolTip(_translate("DrumBurpWindow", "Change visibility of Print & Export Tool Bar", None))
        self.actionExportToolBarIsVisible.setStatusTip(_translate("DrumBurpWindow", "Change visibility of Print & Export Tool Bar", None))
        self.actionHelpToolBarIsVisible.setText(_translate("DrumBurpWindow", "&Help", None))
        self.actionHelpToolBarIsVisible.setToolTip(_translate("DrumBurpWindow", "Change the visibility of the Help Tool Bar", None))
        self.actionHelpToolBarIsVisible.setStatusTip(_translate("DrumBurpWindow", "Change the visibility of the Help Tool Bar", None))
        self.actionShowEmptyLines.setText(_translate("DrumBurpWindow", "Show &Empty Lines", None))
        self.actionShowEmptyLines.setStatusTip(_translate("DrumBurpWindow", "Show or hide empty lines in the score.", None))
        self.actionShowEmptyLines.setWhatsThis(_translate("DrumBurpWindow", "Show/hide empty lines in the score.\n"
"\n"
"Some lines in the score won\'t have any notes on them. You may want to hide these lines in order to save space. Toggle this option to show/hide these empty lines.\n"
"\n"
"Drums which are \"locked\" in the drum kit definition are never hidden.", None))
        self.actionShowDrumKey.setText(_translate("DrumBurpWindow", "Show &Drum Key", None))
        self.actionShowDrumKey.setToolTip(_translate("DrumBurpWindow", "Show/Hide Drum Key", None))
        self.actionShowDrumKey.setStatusTip(_translate("DrumBurpWindow", "Show/Hide Drum Key", None))
        self.actionShowDrumKey.setWhatsThis(_translate("DrumBurpWindow", "Show/hide the drum key.\n"
"\n"
"The drum key appears at the top of the score and shows the abbreviations and full names of each of the drums in the set. To edit the drums in the kit, double-click on the drum key, or on one of the drum name abbreviations at the left hand side of a system.", None))
        self.actionShowScoreInfo.setText(_translate("DrumBurpWindow", "Show &Score Info", None))
        self.actionShowScoreInfo.setToolTip(_translate("DrumBurpWindow", "Show/Hide score info", None))
        self.actionShowScoreInfo.setStatusTip(_translate("DrumBurpWindow", "Show/Hide score information", None))
        self.actionShowScoreInfo.setWhatsThis(_translate("DrumBurpWindow", "Toggle this option to show/hide the score information.\n"
"\n"
"The score information is the list of song name, artist name, tabber name and BPM shown at the top of the score. You can show/hide the whole thing with this option.\n"
"\n"
"If you just want to hide individual items in the score information, double-click on it, then tick/untick the items you want to show/hide in the dialog.", None))
        self.actionShowBeatCount.setText(_translate("DrumBurpWindow", "Show &Beat Count", None))
        self.actionShowBeatCount.setStatusTip(_translate("DrumBurpWindow", "Show/hide the beat count below measures", None))
        self.actionShowBeatCount.setWhatsThis(_translate("DrumBurpWindow", "Show/hide the beat count.\n"
"\n"
"The beat count appears underneath each measure in the score. If you want to save space you may want to hide the count with this option.", None))
        self.actionFitPage.setText(_translate("DrumBurpWindow", "Fit &Page", None))
        self.actionFitPage.setToolTip(_translate("DrumBurpWindow", "Fit score to page", None))
        self.actionFitPage.setStatusTip(_translate("DrumBurpWindow", "Attempt to make the score as wide as possible within the current page size.", None))
        self.actionFitPage.setWhatsThis(_translate("DrumBurpWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Try to make the score fit in the currently selected page size.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">The score width defines how many columns are displayed in the editing window. Selecting this operation tries to set the score width to as many columns as possible so that they will fit in the page size currently selected. The number of columns that fits in a given page depends on the note font size.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Note: if you subsequently change the page size, you\'ll need to select this operation again to fit the score in the page.</span></p></body></html>", None))
        self.actionPlayScore.setText(_translate("DrumBurpWindow", "Play &Score", None))
        self.actionPlayScore.setToolTip(_translate("DrumBurpWindow", "Play this score through MIDI", None))
        self.actionPlayScore.setStatusTip(_translate("DrumBurpWindow", "Play this score through MIDI", None))
        self.actionPlayScore.setWhatsThis(_translate("DrumBurpWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Play this score through MIDI</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">The whole score is played through from start to finish through a MIDI interface. To stop playback, click this button again.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">To change the sound that each note makes, edit the MIDI settings for the drum kit by double-clicking on the drum key. Alternatively, double-click on the drum name abbreviations at the left hand side if each staff.</span></p></body></html>", None))
        self.actionMuteNotes.setText(_translate("DrumBurpWindow", "&Mute MIDI", None))
        self.actionMuteNotes.setToolTip(_translate("DrumBurpWindow", "Enable/disable note audio", None))
        self.actionMuteNotes.setStatusTip(_translate("DrumBurpWindow", "Enable/disable note audio", None))
        self.actionMuteNotes.setWhatsThis(_translate("DrumBurpWindow", "Enable/disable note audio\n"
"\n"
"When a note is added to the score, a sound is played to indicate the note that was just added. This is useful to indicate when you may have hit a wrong note by mistake. If you want to turn this feedback off, click this option.", None))
        self.actionExportMIDI.setText(_translate("DrumBurpWindow", "E&xport MIDI", None))
        self.actionExportMIDI.setToolTip(_translate("DrumBurpWindow", "Export this score to a MIDI file", None))
        self.actionExportMIDI.setStatusTip(_translate("DrumBurpWindow", "Export this score to a MIDI file", None))
        self.actionExportMIDI.setWhatsThis(_translate("DrumBurpWindow", "Export this score to a MIDI file\n"
"\n"
"The score you\'ve created can be written out to a MIDI file. You can then use this as a standalone drum track with a MIDI player.", None))
        self.actionMIDIToolBarIsVisible.setText(_translate("DrumBurpWindow", "&MIDI", None))
        self.actionMIDIToolBarIsVisible.setToolTip(_translate("DrumBurpWindow", "Change visibility of MIDI toolbar", None))
        self.actionMIDIToolBarIsVisible.setStatusTip(_translate("DrumBurpWindow", "Change visibility of MIDI toolbar", None))
        self.actionLoopBars.setText(_translate("DrumBurpWindow", "&Loop Selected Measures", None))
        self.actionLoopBars.setToolTip(_translate("DrumBurpWindow", "Play the selected bars in a constant loop", None))
        self.actionLoopBars.setStatusTip(_translate("DrumBurpWindow", "Play the selected bars in a constant loop", None))
        self.actionLoopBars.setWhatsThis(_translate("DrumBurpWindow", "Play the selected bars in a constant loop\n"
"\n"
"Plays back the currently selected measures in a constant loop: once the measures have finished playing back, playback is started again immediately. To stop playback, click this button again.", None))
        self.actionPlayOnce.setText(_translate("DrumBurpWindow", "Play Selected Measures &Once", None))
        self.actionPlayOnce.setToolTip(_translate("DrumBurpWindow", "Play the selected measures once", None))
        self.actionPlayOnce.setStatusTip(_translate("DrumBurpWindow", "Play the selected measures once", None))
        self.actionPlayOnce.setWhatsThis(_translate("DrumBurpWindow", "Play the selected measures once\n"
"\n"
"Plays the currently selected measures back through MIDI. To stop playback, click this button again.", None))
        self.actionCopyMeasures.setText(_translate("DrumBurpWindow", "&Copy Measures", None))
        self.actionCopyMeasures.setToolTip(_translate("DrumBurpWindow", "Copy the currently selected measures to the clipboard", None))
        self.actionCopyMeasures.setStatusTip(_translate("DrumBurpWindow", "Copy the currently selected measures to the clipboard", None))
        self.actionCopyMeasures.setShortcut(_translate("DrumBurpWindow", "Ctrl+C", None))
        self.actionPasteMeasures.setText(_translate("DrumBurpWindow", "&Paste Measures", None))
        self.actionPasteMeasures.setToolTip(_translate("DrumBurpWindow", "Paste the clipboard over the currently selected measures", None))
        self.actionPasteMeasures.setShortcut(_translate("DrumBurpWindow", "Ctrl+V", None))
        self.actionClearMeasures.setText(_translate("DrumBurpWindow", "C&lear Measures", None))
        self.actionClearMeasures.setToolTip(_translate("DrumBurpWindow", "Clear the selected measures of all notes", None))
        self.actionClearMeasures.setStatusTip(_translate("DrumBurpWindow", "Clear the selected measures of all notes", None))
        self.actionClearMeasures.setShortcut(_translate("DrumBurpWindow", "Del", None))
        self.actionDeleteMeasures.setText(_translate("DrumBurpWindow", "&Delete Measures", None))
        self.actionDeleteMeasures.setToolTip(_translate("DrumBurpWindow", "Delete the currently selected measures", None))
        self.actionDeleteMeasures.setStatusTip(_translate("DrumBurpWindow", "Delete the currently selected measures", None))
        self.actionDeleteMeasures.setShortcut(_translate("DrumBurpWindow", "Ctrl+Del", None))
        self.actionFillPasteMeasures.setText(_translate("DrumBurpWindow", "&Fill Paste Measures", None))
        self.actionFillPasteMeasures.setToolTip(_translate("DrumBurpWindow", "Paste the copied measues enough times to fill the selected ones.", None))
        self.actionFillPasteMeasures.setStatusTip(_translate("DrumBurpWindow", "Paste the copied measues enough times to fill the selected ones.", None))
        self.actionFillPasteMeasures.setShortcut(_translate("DrumBurpWindow", "Ctrl+Shift+V", None))
        self.actionOnlineManual.setText(_translate("DrumBurpWindow", "&Online Manual", None))
        self.actionOnlineManual.setToolTip(_translate("DrumBurpWindow", "Open the Online Manual in a web browser", None))
        self.actionOnlineManual.setStatusTip(_translate("DrumBurpWindow", "Open the Online Manual in a web browser", None))
        self.actionExportLilypond.setText(_translate("DrumBurpWindow", "Export &Lilypond", None))
        self.actionExportLilypond.setToolTip(_translate("DrumBurpWindow", "Export Lilypond", None))
        self.actionExportLilypond.setStatusTip(_translate("DrumBurpWindow", "Export this score to a Lilypond input file", None))
        self.actionExportLilypond.setWhatsThis(_translate("DrumBurpWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Export this score to a Lilypond file.</p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Lilypond is a TeX based music typesetting system available from <a href=\"http://www.lilypond.org\"><span style=\" text-decoration: underline; color:#0000ff;\">lilypond.org</span></a>. DrumBurp can export its scores to the Lilypond input format. Run Lilypond on the resulting files to have your score set in notation rather than as tab.</p></body></html>", None))
        self.actionCheckForUpdates.setText(_translate("DrumBurpWindow", "Check for updates now", None))
        self.actionCheckOnStartup.setText(_translate("DrumBurpWindow", "Check for updates on startup", None))
        self.actionShowMeasureCounts.setText(_translate("DrumBurpWindow", "Show Measure Indexes", None))
        self.actionShowMeasureCounts.setIconText(_translate("DrumBurpWindow", "Show Measure Indexes", None))
        self.actionShowMeasureCounts.setToolTip(_translate("DrumBurpWindow", "Show/Hide Measure Indexes", None))
        self.actionShowMeasureCounts.setStatusTip(_translate("DrumBurpWindow", "Show/Hide Measure Indexes", None))
        self.actionShowMeasureCounts.setWhatsThis(_translate("DrumBurpWindow", "Show/Hide Measure Indexes", None))
        self.actionEditColours.setText(_translate("DrumBurpWindow", "Edit &Colours", None))
        self.actionEditColours.setToolTip(_translate("DrumBurpWindow", "Edit the colours DrumBurp uses", None))
        self.actionRefreshMidiDevices.setText(_translate("DrumBurpWindow", "Refresh Device List", None))
        self.actionRefreshMidiDevices.setToolTip(_translate("DrumBurpWindow", "Refresh MIDI device list", None))
        self.actionRefreshMidiDevices.setStatusTip(_translate("DrumBurpWindow", "Refresh MIDI device list", None))
        self.actionRefreshMidiDevices.setWhatsThis(_translate("DrumBurpWindow", "Refresh MIDI device list", None))

from Widgets.ScoreView_plugin import ScoreView
from . import DrumBurp_rc
